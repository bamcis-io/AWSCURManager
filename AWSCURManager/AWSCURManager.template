{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Transform"                : "AWS::Serverless-2016-10-31",
    "Description"              : "Keeps the list of Cost and Usage Reports for a reporting period up to date with only 1 copy of the report in the destination S3 bucket.",


    "Parameters"               : {
		"Format" : {
			"Type" : "String",
			"Description" : "The format that the reports will use.",
			"AllowedValues" : [
				"Parquet",
				"TextOrCsv"
			],
			"Default":"TextOrCsv"
		},
		"Compression" : {
			"Type" : "String",
			"Description" : "The compression that the reports will use.",
			"AllowedValues" : [
				"GZIP",
				"Parquet",
				"ZIP"
			],
			"Default" : "GZIP"
		},
		"TimeUnit" : {
			"Type" : "String",
			"Description" : "The default time unit used for reports if not defined in the request.",
			"AllowedValues" : [
				"HOURLY",
				"DAILY"
			],
			"Default" : "DAILY"
		},

        "ReportName"   : {
            "Description" : "The name of the report",
            "Type"        : "String",
            "MinLength"   : 1,
            "MaxLength"   : 256
		},
        "ReportDeliveryBucketName" : {
            "Type" : "String",
            "Description" : "The S3 bucket where new CUR reports will be delivered to.",
            "AllowedPattern" : "^[a-z](?:(?:\\.(?!\\.))|-|[a-zA-Z0-9]){1,61}[a-z]$",
            "ConstraintDescription" : "Member must satisfy regular expression pattern: ^[a-z](?:(?:\\.(?!\\.))|-|[a-zA-Z0-9]){1,61}[a-z]$"
        },
		"ReportRepositoryBucketName" : {
            "Type" : "String",
            "Description" : "The S3 bucket where only the most recent CURs for each month are kept.",
            "AllowedPattern" : "^[a-z](?:(?:\\.(?!\\.))|-|[a-zA-Z0-9]){1,61}[a-z]$",
            "ConstraintDescription" : "Member must satisfy regular expression pattern: ^[a-z](?:(?:\\.(?!\\.))|-|[a-zA-Z0-9]){1,61}[a-z]$"
        },
		"GlueJobName" : {
			"Description" : "(Optional) The name of the Glue Job that will run after the files are moved. Leave this blank if you don't want to run a glue job.",
			"Type" : "String",
			"Default" : ""
		},
		"GlueDatabaseName" : {
			"Description" : "The name of the Glue Database that stores the billing file tables.",
			"Type" : "String",
			"Default" : "billingdata"
		},
		"GlueJobDestinationBucket" : {
			"Description" : "(Optional) The S3 Bucket name where the Glue ETL Job will write out the job results.",
			"Type" : "String",
			"Default" : ""
		},
		"OutputPathFormat" : {
			"Type" : "String",
			"Description" : "The path format used for the resulting S3 objects. BillingPeriod: accountid=123456789012/billingperiod=20190101/filename.extension. YearMonth: accountid=123456789012/year=2019/month=1/filename.extension",
			"AllowedValues" : [
				"BillingPeriod",
				"YearMonth"
			],
			"Default" : "YearMonth"
		},

        "LogRetentionInDays" : {
            "Type" : "Number",
            "Description" : "The number of days to retain the CloudWatch Logs for the function. If this is set to 0, it will be infinite retention.",
            "MinValue"    : 0,
            "Default"     : 7
        },
        "NotificationEmail"  : {
            "Description" : "The email address notifications will be sent to when processing errors occur.",
            "Type"        : "String"
        },
        "OrganizationTag"    : {
            "Description" : "The organization this account is associated with",
            "Type"        : "String",
            "AllowedPattern" : "^\\S{2,}$",
            "ConstraintDescription" : "Member must satisfy regular expression pattern: ^\\S{2,}$"
        },
        "ApplicationTag"     : {
            "Description" : "The application this account is associated with",
            "Type"        : "String",
            "AllowedPattern" : "^\\S{2,}$",
            "ConstraintDescription" : "Member must satisfy regular expression pattern: ^\\S{2,}$"
        },
        "EnvironmentTag"     : {
            "Description" : "The environment this account is associated with",
            "Type"        : "String",
            "AllowedPattern" : "^\\S{2,}$",
            "ConstraintDescription" : "Member must satisfy regular expression pattern: ^\\S{2,}$"
        },

        "CodeBucket" : {
	       "Description" : "The bucket where the code is uploaded",
		   "Type" : "String"
	     },
	    "CodeKey" : {
	       "Description" : "The object key of the lambda deployment package",
	       "Type" : "String"
	    }
    },

	"Rules":{
		"ParquetFormat" : {
			"RuleCondition" : {
				"Fn::Equals" : [
					{
						"Ref" : "Format"
					},
					"Parquet"
				]
			},
			"Assertions" : [
				{
					"Assert" : {
						"Fn::Equals" : [
							{
								"Ref" : "Compression"
							},
							"Parquet"
						]
					},
					"AssertDescription" : "When the format is specified as Parquet, the compression must also be Parquet."
				}
			]
		},
		"ParquetCompression" : {
			"RuleCondition" : {
				"Fn::Equals":[
					{
						"Ref":"Compression"
					},
					"Parquet"
				]
			},
			"Assertions" : [
				{
					"Assert" : {
						"Fn::Equals" : [
							{
								"Ref":"Format"
							},
							"Parquet"
						]
					},
					"AssertDescription":"When the compression is specified as Parquet, the format must also be Parquet."
				}
			]
		}
	},

    "Conditions"               : {
        "InfiniteRetention" : {
            "Fn::Equals" : [
                {
                    "Ref" : "LogRetentionInDays"
                },
                0
            ]
        },
        "CreateSNS"         : {
            "Fn::Not" : [
                {
                    "Fn::Equals" : [
                        {
                            "Ref" : "NotificationEmail"
                        },
                        ""
                    ]
                }
            ]
        }
    },


	"Mappings" : {
		"Internal" : {
			"Lambda" : {
				"FunctionName" : "CURManager"
			}
		}
	},


    "Resources"                : {
		"CostAndUsageReport"   : {
			"Type" : "AWS::CUR::ReportDefinition",
			"Properties" : {

					"ReportName" : {
						"Ref" : "ReportName"
					},
					"Compression" : {
						"Ref" : "Compression"
					},
					"Format"      : {
						"Ref" : "Format"
					},
					"AdditionalSchemaElements" : [
						"RESOURCES"
					],
					"RefreshClosedReports" : "true",
					"ReportVersioning" : "OVERWRITE_REPORT",
					"S3Bucket"    : {
						"Ref" : "ReportDeliveryS3Bucket"
					},
					"S3Prefix"    : {
						"Fn::Sub" : "${AWS::AccountId}/"						
					},
					"S3Region"      : {
						"Ref" : "AWS::Region"
					},
					"TimeUnit"    : {
						"Ref" : "TimeUnit"
					}
			},
			"DependsOn"  : [
				"ReportDeliveryS3BucketPolicy"
			]
		},

		"ReportDeliveryS3Bucket" : {
            "Type" : "AWS::S3::Bucket",
            "Properties" : {
			    "BucketName" : {
					"Ref" : "ReportDeliveryBucketName"
				}
            }
        },

        "ReportDeliveryS3BucketPolicy" : {
            "Type" : "AWS::S3::BucketPolicy",
            "Properties" : {
                "Bucket" : {
                    "Ref" : "ReportDeliveryS3Bucket"
                },
                "PolicyDocument" : {
                    "Version" : "2008-10-17",
                    "Id"      : "1",
                    "Statement" : [
						{
							"Sid": "0",
							"Effect": "Deny",
							"NotPrincipal": {
								"AWS": [
									"AIDAIONIVVYH4HUH237AE",									
									"arn:aws:iam::386209384616:user/IAM-Programmatic-Access-Prod",
									"AIDAJLSI7DTYBUZAOKHVM",
									"arn:aws:iam::386209384616:user/Origami_CustomerReportPublishing_us-east-1",
									"arn:aws:iam::386209384616:root"
								]
							},
							"Action": [
								"s3:PutObject"
							],
							"Resource":  {
								"Fn::Sub" : "arn:aws:s3:::${ReportDeliveryS3Bucket}/*"
							}
						},
                        {
                            "Sid" : "1",
                            "Effect" : "Allow",
                            "Principal" : {
                                "AWS" : "arn:aws:iam::386209384616:root"
                            },
                            "Action"    : [
                                "s3:GetBucketAcl",
                                "s3:GetBucketPolicy"
                            ],
                            "Resource"  : {
								"Fn::Sub" : "arn:aws:s3:::${ReportDeliveryS3Bucket}"								
							}
                        },
                        {
                            "Sid" : "2",
                            "Effect" : "Allow",
                            "Principal" : {
                                "AWS" : "arn:aws:iam::386209384616:root"
                            },
                            "Action"    : [
                                "s3:PutObject"
                            ],
                            "Resource"  : {
								"Fn::Sub" : "arn:aws:s3:::${ReportDeliveryS3Bucket}/*"
							}
                        }
                    ]
                }
            }
        },

		"ReportRepositoryS3Bucket" : {
            "Type" : "AWS::S3::Bucket",
            "Properties" : {
			    "BucketName" : {
					"Ref" : "ReportRepositoryBucketName"
				}
            }
        },

		"ReportRepoS3BucketPolicy" : {
            "Type" : "AWS::S3::BucketPolicy",
            "Properties" : {
                "Bucket" : {
                    "Ref" : "ReportRepositoryS3Bucket"
                },
                "PolicyDocument" : {
                    "Version" : "2008-10-17",
                    "Id"      : "1",
                    "Statement" : [
                        {
                            "Sid" : "1",
                            "Effect" : "Deny",
                            "Principal" : "*",
                            "Action"    : [
                                "s3:PutObject",
                                "s3:DeleteObject"
                            ],
                            "Resource"  : {
								"Fn::Sub" : "arn:aws:s3:::${ReportRepositoryS3Bucket}/*"								
							},
							"Condition" : {
								"StringNotLike" : {
									"aws:UserId" : [
										{
											"Fn::Sub" : "${LambdaCURRole.RoleId}:*"
										}
									]
								}
							}
                        }
                    ]
                }
            }
        },

        "SNSTopic" : {
            "Type" : "AWS::SNS::Topic",
            "Condition" : "CreateSNS",
            "Properties" : {
                "DisplayName" : "CURManagerExecutionFailures",
                "Subscription" : [
                    {
                        "Protocol" : "email",
                        "Endpoint" : {
                            "Ref" : "NotificationEmail"
                        }
                    }
                ],
                "TopicName"    : "CURManagerExecutionFailures"
            }
        },
		"SQSDeadLetterQueue" : {
			"Type" : "AWS::SQS::Queue",
			"Properties" : {
			}
		},

        "LambdaCURRole" : {
            "Type" : "AWS::IAM::Role",
            "Properties" : {
                "AssumeRolePolicyDocument" : {
                    "Version" : "2012-10-17",
                    "Statement" : [
                        {
                            "Effect" : "Allow",
                            "Action" : [
                                "sts:AssumeRole"
                            ],
                            "Principal" : {
                                "Service" : [
                                    "lambda.amazonaws.com"
                                ]
                            }
                        }
                    ]
                }
            }
        },
        "LambdaCWLPolicy"     : {
            "Type" : "AWS::IAM::Policy",
            "Properties" : {
                "PolicyName" : "LambdaCWLPolicy",
                "PolicyDocument" : {
                    "Version" : "2012-10-17",
                    "Statement" : [
                        {
                            "Effect" : "Allow",
                            "Action" : [
                                "logs:CreateLogStream",
                                "logs:CreateLogGroup",
                                "logs:DescribeLogStreams",
                                "logs:PutLogEvents",
                                "logs:DescribeLogGroups"
                            ],
                            "Resource" : {
                                "Fn::Join" : [
                                    "",
                                    [
                                        "arn:aws:logs:*:",
                                        {
                                            "Ref" : "AWS::AccountId"
                                        },
                                        ":*"
                                    ]
                                ]
                            }
                        }
                    ]
                },
                "Roles"          : [
                    {
                        "Ref" : "LambdaCURRole"
                    }
                ]
            }
        },
        "LambdaKMSPolicy"     : {
            "Type" : "AWS::IAM::Policy",
            "Properties" : {
                "PolicyName" : "LambdaKMSPolicy",
                "PolicyDocument" : {
                    "Version" : "2012-10-17",
                    "Statement" : [
                        {
                            "Effect" : "Allow",
                            "Action" : [
                                "kms:Decrypt"
                            ],
                            "Resource" : [
                                "*"
                            ]
                        }
                    ]
                },
                "Roles"          : [
                    {
                        "Ref" : "LambdaCURRole"
                    }
                ]
            }
        },
        "LambdaSNSPolicy"     : {
            "Type" : "AWS::IAM::Policy",
			"Condition" : "CreateSNS",
            "Properties" : {
                "PolicyName" : "LambdaSNSPolicy",
                "PolicyDocument" : {
                    "Version" : "2012-10-17",
                    "Statement" : [
                        {
                            "Effect" : "Allow",
                            "Action" : [
                                "sns:Publish"
                            ],
                            "Resource" : [
                                {
                                    "Ref" : "SNSTopic"
                                }
                            ]
                        }
                    ]
                },
                "Roles"          : [
                    {
                        "Ref" : "LambdaCURRole"
                    }
                ]
            }
        },
        "LambdaS3Policy"      : {
            "Type" : "AWS::IAM::Policy",
            "Properties" : {
                "PolicyName" : "LambdaS3Policy",
                "PolicyDocument" : {
                    "Version" : "2012-10-17",
                    "Statement" : [
                        {
                            "Effect" : "Allow",
                            "Action" : [
                                "s3:GetObject"
                            ],
                            "Resource" : [
                                {
									"Fn::Sub" : "arn:aws:s3:::${ReportDeliveryBucketName}/*"                                 
                                }
                            ]
                        },
						{
                            "Effect" : "Allow",
                            "Action" : [
								"s3:DeleteObject",
								"s3:PutObject"
                            ],
                            "Resource" : [
                                {
									"Fn::Sub" : "arn:aws:s3:::${ReportRepositoryBucketName}/*"                                 
                                }
                            ]
                        },
						{
                            "Effect" : "Allow",
                            "Action" : [
                                "s3:ListBucket"
                            ],
                            "Resource" : [
                                {
									"Fn::Sub" : "arn:aws:s3:::${ReportRepositoryBucketName}"                                 
                                }
                            ]
                        }
                    ]
                },
                "Roles"          : [
                    {
                        "Ref" : "LambdaCURRole"
                    }
                ]
            }
        },
		"LambdaGluePolicy"      : {
            "Type" : "AWS::IAM::Policy",
            "Properties" : {
                "PolicyName" : "LambdaGluePolicy",
                "PolicyDocument" : {
                    "Version" : "2012-10-17",
                    "Statement" : [
                        {
                            "Effect" : "Allow",
                            "Action" : [
                                "glue:StartJobRun",
								"glue:CreateDatabase",
								"glue:CreateTable",
								"glue:UpdateTable",
								"glue:GetDatabase",
								"glue:GetTable"
                            ],
                            "Resource" : "*"
                        }
                    ]
                },
                "Roles"          : [
                    {
                        "Ref" : "LambdaCURRole"
                    }
                ]
            }
        },
		"LambdaSQSPolicy"     : {
            "Type" : "AWS::IAM::Policy",
            "Properties" : {
                "PolicyName" : "LambdaSQSWorkerPolicy",
                "PolicyDocument" : {
                    "Version" : "2012-10-17",
                    "Statement" : [
                        {
                            "Effect" : "Allow",
                            "Action" : [
                                "sqs:SendMessage"
                            ],
                            "Resource" : [
                                {
                                    "Fn::GetAtt" : [ "SQSDeadLetterQueue", "Arn" ]
                                }
                            ]
                        }
                    ]
                },
                "Roles"          : [
                    {
                        "Ref" : "LambdaCURRole"
                    }
                ]
            }
        },

		"LambdaFunction"      : {
            "Type" : "AWS::Serverless::Function",
            "Properties" : {
				"FunctionName" : {
					"Fn::FindInMap" : [ "Internal", "Lambda", "FunctionName" ]
				},
				"Description" : "Reads the updated manifest file and moves the new report files to the destination bucket.",
                "Handler" : "AWSCURManager::BAMCIS.LambdaFunctions.AWSCURManager.Entrypoint::Exec",
                "Runtime" : "dotnetcore3.1",
                "CodeUri": {
		           "Bucket" : {
		              "Ref" : "CodeBucket"
		           },
		           "Key" : {
		              "Ref" : "CodeKey"
		           }
		        },
                "MemorySize" : 256,
                "Timeout"    : 30,
                "Role"       : {
                    "Fn::GetAtt" : [
                        "LambdaCURRole",
                        "Arn"
                    ]
                },
				"Environment" : {
					 "Variables" : {
						"SNS_TOPIC" : {
							"Fn::If" : [
								"CreateSNS",
								{
									"Ref" : "SNSTopic"
								},
								{
									"Ref" : "AWS::NoValue"
								}
							]
						},
						"DESTINATION_S3_BUCKET" : {
							"Ref" : "ReportRepositoryBucketName"
						},
						"GLUE_JOB_NAME" : {
							"Ref" : "GlueJobName"
						},
						"DATABASE_NAME": {
							"Ref" : "GlueDatabaseName"
						},
						"GLUE_DESTINATION_BUCKET" : {
							"Ref" : "GlueJobDestinationBucket"
						},
						"OUTPUT_PATH_FORMAT" : {
							"Ref" : "OutputPathFormat"
						}
					 }
				},
				"DeadLetterQueue" : {
					"Type" : "SQS",
					"TargetArn" : {
						"Fn::GetAtt" : [ "SQSDeadLetterQueue", "Arn" ]
					}
				},
                "Events"     : {
                    "S3ObjectCreated" : {
					   "Type" : "S3",
					   "Properties" : {
					     "Bucket" : {
							"Ref" : "ReportDeliveryS3Bucket"
						 },
						 "Events" : [
							"s3:ObjectCreated:Put",
							"s3:ObjectCreated:Post"
						 ],
						 "Filter" : {
							"S3Key" : {
							   "Rules" : [
								{
								  "Name" : "prefix",
								  "Value" : {
									"Fn::Sub" : "${AWS::AccountId}/${ReportName}/20"
								  }
								},
								{
								  "Name" : "suffix",
								  "Value" : {
									"Fn::Sub" : "01/${ReportName}-Manifest.json"
								  }
								}
							   ]
							}
						 }
					   }
                    }
                },
				"Tags"       : {
                    "Name" : {
						"Fn::FindInMap" : [ "Internal", "Lambda", "FunctionName" ]
					},
                    "Environment" : {
                        "Ref" : "EnvironmentTag"
                    },
                    "Application" : {
                        "Ref" : "ApplicationTag"
                    },
                    "Organization" : {
                        "Ref" : "OrganizationTag"
                    }
                }
            },
			"DependsOn" : [
				"LambdaSQSPolicy"
			]
        },

        "CloudWatchLogGroup"  : {
            "Type" : "AWS::Logs::LogGroup",
            "Properties" : {
                "LogGroupName" : {
					"Fn::Sub" : [
						"/aws/lambda/${Name}",
						{
							"Name" : {
								"Fn::FindInMap" : [ "Internal", "Lambda", "FunctionName" ]
							}
						}
					]
				},
                "RetentionInDays" : {
                    "Fn::If" : [
                        "InfiniteRetention",
                        {
                            "Ref" : "AWS::NoValue"
                        },
                        {
                            "Ref" : "LogRetentionInDays"
                        }
                    ]
                }
            }
        },
		"InvocationErrorAlarm" : {
			"Type" : "AWS::CloudWatch::Alarm",
			"Properties" : {
				"ActionsEnabled" : "true",
				"AlarmActions" : [
					{
						"Ref" : "SNSTopic"
					}
				],
				"AlarmDescription" : "Alarm if the CUR Manager Function Has Failures Once in 60 Seconds",
				"ComparisonOperator" : "GreaterThanOrEqualToThreshold",
				"Namespace" : "AWS/Lambda",
				"MetricName" : "Errors",
				"Dimensions" : [
					{
						"Name" : "FunctionName",
						"Value" : {
							"Ref" : "LambdaFunction"
						}
					}
				],
				"Statistic" : "Sum",
				"EvaluationPeriods" : "1",
				"Threshold" : "1",
				"Period" : "60",
				"TreatMissingData" : "notBreaching",
				"Unit" : "Count"
			}
		},
		"DeadLetterQueueDepthAlarm": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"AlarmDescription": "Alarm if queue depth grows beyond 1 message in a 5 minute span.",
				"Namespace": "AWS/SQS",
				"MetricName": "ApproximateNumberOfMessagesVisible",
				"Dimensions": [
					{
						"Name": "QueueName",
						"Value" : { "Fn::GetAtt" : ["SQSDeadLetterQueue", "QueueName"] }
					}
				],
				"Statistic": "Sum",
				"Period": "300",
				"EvaluationPeriods": "1",
				"Threshold": "1",
				"ComparisonOperator": "GreaterThanOrEqualToThreshold",
				"AlarmActions": [
					{
						"Ref": "SNSTopic"
					}
				]
			}
		}
    },


    "Outputs"                  : {
    }
}